using UnityEngine;
using UnityEngine.SceneManagement;
using System.Collections;

public class UnityUtilityScript : MonoBehaviour
{
    // Component references (assign in inspector)
    public AudioSource audioSource;
    public Rigidbody rb;
    public Animator animator;

    void Start()
    {
        Debug.Log("Script started!");
    }

    void Update()
    {
        // Examples of usage in Update
    }

    // Transformation and movement
    void TransformationExamples()
    {
        // Move forward
        transform.Translate(10, 0, 0);

        // Rotate
        transform.Rotate(0, 0, -15);

        // Go to a specific position
        transform.localPosition = new Vector3(0, 0, 0);

        // Orient to a specific angle
        transform.localEulerAngles = new Vector3(0, 0, 90);

        // Look at a position
        transform.LookAt(MousePosition());

        // Find a position
        float xPos = transform.localPosition.x;

        // Find a rotation
        float zRot = transform.localEulerAngles.z;

        // Move towards a target
        Vector3 targetPosition = Vector3.zero;
        float speed = 5f;
        transform.position = Vector3.MoveTowards(transform.position, targetPosition, speed * Time.deltaTime);

        // Lerp between two positions
        Vector3 startPosition = Vector3.zero;
        Vector3 endPosition = Vector3.one;
        transform.position = Vector3.Lerp(startPosition, endPosition, Time.time * speed);

        // Smooth rotation
        Quaternion targetRotation = Quaternion.identity;
        transform.rotation = Quaternion.Lerp(transform.rotation, targetRotation, Time.deltaTime * speed);
    }

    // GameObject management
    void GameObjectManagement()
    {
        // Show/Hide a GameObject
        gameObject.SetActive(true);
        gameObject.SetActive(false);

        // Destroy an object
        Destroy(gameObject);

        // Instantiate an object
        GameObject prefab = null; // Assign in inspector
        Instantiate(prefab, transform.position, Quaternion.identity);

        // Find an object in the scene
        GameObject player = GameObject.Find("Player");

        // Find all objects with a certain tag
        GameObject[] enemies = GameObject.FindGameObjectsWithTag("Enemy");

        // Change the parent of a GameObject
        Transform newParentTransform = null; // Assign as needed
        transform.SetParent(newParentTransform);

        // Access a child of a GameObject
        Transform childTransform = transform.Find("ChildName");

        // Change the color of a renderer
        GetComponent<Renderer>().material.color = Color.red;
    }

    // Component management
    void ComponentManagement()
    {
        // Get a component
        rb = GetComponent<Rigidbody>();

        // Add a component
        gameObject.AddComponent<BoxCollider>();

        // Check if a GameObject has a certain component
        if (GetComponent<Collider>() != null)
        {
            Debug.Log("This GameObject has a Collider");
        }

        // Access another script on the same GameObject
        OtherScript otherScript = GetComponent<OtherScript>();
    }

    // Physics
    void PhysicsExamples()
    {
        // Add force to a Rigidbody
        rb.AddForce(Vector3.forward * 10);

        // Detect a collision
        void OnCollisionEnter(Collision collision)
        {
            Debug.Log("Collision detected with " + collision.gameObject.name);
        }

        // Detect a trigger
        void OnTriggerEnter(Collider other)
        {
            Debug.Log("Trigger entered by " + other.gameObject.name);
            if (other.CompareTag("Player"))
            {
                Debug.Log("Player");
            }
        }

        // Use Physics.OverlapSphere to detect colliders in a sphere
        float radius = 5f;
        Collider[] hitColliders = Physics.OverlapSphere(transform.position, radius);

        // Use Physics.Raycast to detect objects
        RaycastHit hit;
        float maxDistance = 100f;
        if (Physics.Raycast(transform.position, transform.forward, out hit, maxDistance))
        {
            Debug.Log("Hit " + hit.collider.name);
        }
    }

    // Input
    void InputExamples()
    {
        // Get axis input
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        // Detect mouse click
        if (Input.GetMouseButtonDown(0)) // 0 for left click, 1 for right click, 2 for middle click
        {
            Debug.Log("Mouse click detected");
        }

        // Get mouse position
        Vector3 mousePosition = Input.mousePosition;

        // Convert mouse position to world coordinates
        Vector3 worldPosition = Camera.main.ScreenToWorldPoint(mousePosition);

        // Cast a ray from the camera to the mouse position
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        RaycastHit hit;
        if (Physics.Raycast(ray, out hit))
        {
            Debug.Log("Ray hit: " + hit.collider.name);
        }
    }

    // Audio
    void AudioExamples()
    {
        // Play a sound
        audioSource.Play();

        // Stop the sound
        audioSource.Stop();

        // Change the pitch of the sound
        audioSource.pitch += 0.1f;

        // Increase the volume of the sound
        audioSource.volume += 0.1f;

        // Get the volume
        float volume = audioSource.volume;
    }

    // Animation
    void AnimationExamples()
    {
        // Use animation
        animator.SetTrigger("Jump");
        animator.SetBool("IsRunning", true);
        animator.SetFloat("Speed", 1.5f);
    }

    // Coroutines
    IEnumerator CoroutineExamples()
    {
        while(true)
        {
            Debug.Log("This coroutine runs in a loop");
            yield return new WaitForSeconds(1f);
        }
    }

    IEnumerator WaitAndExecute()
    {
        yield return new WaitForSeconds(2);
        Debug.Log("This action occurred after 2 seconds");
    }

    void StartCoroutineExample()
    {
        StartCoroutine(WaitAndExecute());
    }

    // Data management
    void DataManagement()
    {
        // Save data
        PlayerPrefs.SetInt("Score", 100);
        PlayerPrefs.SetFloat("Volume", 0.5f);
        PlayerPrefs.SetString("PlayerName", "John");

        // Load saved data
        int savedScore = PlayerPrefs.GetInt("Score", 0);
        float savedVolume = PlayerPrefs.GetFloat("Volume", 1f);
        string savedName = PlayerPrefs.GetString("PlayerName", "Unknown");
    }

    // Scene management
    void SceneManagement()
    {
        // Change scene
        SceneManager.LoadScene("SceneName");

        // Keep an object between scenes
        DontDestroyOnLoad(gameObject);
    }

    // Mathematics
    void MathExamples()
    {
        float value = 3.7f;
        float clampedValue = Mathf.Clamp(value, 0f, 1f);
        float roundedValue = Mathf.Round(value);
        float randomValue = Random.Range(0f, 10f);

        Vector3 target = Vector3.zero;
        float distance = Vector3.Distance(transform.position, target);
    }

    // Debugging
    void DebuggingExamples()
    {
        Debug.Log("Normal log message");
        Debug.LogWarning("Warning message");
        Debug.LogError("Error message");

        Debug.DrawLine(Vector3.zero, Vector3.one, Color.red, 1f);
    }

    void OnDrawGizmos()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, 1f);
    }

    // Miscellaneous
    void MiscExamples()
    {
        // Change graphics quality
        QualitySettings.SetQualityLevel(2);

        // Manage mouse cursor
        Cursor.visible = false;
        Cursor.lockState = CursorLockMode.Locked;

        // Change game time
        Time.timeScale = 0.5f;

        // Open a URL
        Application.OpenURL("https://www.example.com");

        // Change resolution
        Screen.SetResolution(1920, 1080, true);

        // Quit the application
        Application.Quit();
    }

    // Utility methods
    Vector3 MousePosition()
    {
        // Implement this method to return the mouse position in world space
        return Vector3.zero;
    }
}
